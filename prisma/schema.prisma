// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MANAGER
  CLEANER
  CLIENT
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  password      String?   // Made password optional
  name          String?
  role          UserRole  @default(CLIENT)
  isActive      Boolean   @default(true)
  phoneNumber   String?
  address       Address?
  bookings      Booking[] // Bookings made by the user
  cleanerBookings Booking[] @relation("BookingToCleaner") // Bookings assigned to cleaner
  documents     Document[]
  reviews       Review[]
  notifications Notification[]
  shifts        Shift[]
  tasks         Task[]
  feedback      Feedback[]
  reports       Report[]

  @@index([email])
  @@index([role])
}

model Address {
  id          String   @id @default(cuid())
  street      String
  city        String
  state       String
  zipCode     String
  country     String   @default("USA")
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Decimal   @db.Decimal(10, 2)
  duration    Int       // Duration in minutes
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@index([isActive])
}

model Booking {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  date          DateTime
  status        ServiceStatus @default(PENDING)
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  serviceId     String
  service       Service       @relation(fields: [serviceId], references: [id])
  payment       Payment?
  notes         String?
  cleanerId     String?
  cleaner       User?         @relation("BookingToCleaner", fields: [cleanerId], references: [id])
  review        Review?
  feedback      Feedback?
  notifications Notification[]
  tasks         Task[]

  @@index([userId])
  @@index([serviceId])
  @@index([status])
  @@index([date])
}

model Payment {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  bookingId     String        @unique
  booking       Booking       @relation(fields: [bookingId], references: [id])
  transactionId String?
  paymentMethod String?

  @@index([status])
  @@index([bookingId])
}

model Document {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  url         String
  type        String
  size        Int
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  isPublic    Boolean  @default(false)
  sharedWith  String[] // Array of user IDs

  @@index([userId])
  @@index([type])
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int      @db.SmallInt
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookingId String   @unique
  booking   Booking  @relation(fields: [bookingId], references: [id])

  @@index([userId])
  @@index([rating])
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model Shift {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startTime   DateTime
  endTime     DateTime
  duration    Int      // Duration in minutes
  status      String   // SCHEDULED, IN_PROGRESS, COMPLETED
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  notes       String?
  hourlyRate  Decimal  @db.Decimal(10, 2)

  @@index([startTime])
  @@index([endTime])
  @@index([userId])
  @@index([status])
}

model Task {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  status      String   // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  priority    String   // LOW, MEDIUM, HIGH
  dueDate     DateTime?
  cleanerId   String?
  cleaner     User?    @relation(fields: [cleanerId], references: [id])
  bookingId   String?
  booking     Booking? @relation(fields: [bookingId], references: [id])

  @@index([cleanerId])
  @@index([bookingId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

model MaintenanceLog {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  performedAt DateTime @default(now())
  description String
  cost        Decimal  @db.Decimal(10, 2)
  type        String   // REPAIR, INSPECTION, REPLACEMENT
  status      String   // SCHEDULED, IN_PROGRESS, COMPLETED
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  @@index([performedAt])
  @@index([equipmentId])
  @@index([type])
  @@index([status])
}

model Equipment {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  name            String
  description     String?
  serialNumber    String?
  purchaseDate    DateTime?
  warrantyExpiry  DateTime?
  status          String          // ACTIVE, MAINTENANCE, RETIRED
  category        String          // VEHICLE, CLEANING_EQUIPMENT, TOOLS
  location        String?
  maintenanceLogs MaintenanceLog[]

  @@index([status])
  @@index([category])
  @@index([location])
}

model Location {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  address     String?
  type        String   // WAREHOUSE, OFFICE, CLIENT_SITE
  inventory   InventoryItem[]

  @@index([name])
  @@index([type])
}

model InventoryTransaction {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  date        DateTime @default(now())
  type        String   // IN, OUT
  quantity    Int
  cost        Decimal  @db.Decimal(10, 2)
  itemId      String
  item        InventoryItem @relation(fields: [itemId], references: [id])

  @@index([date])
  @@index([type])
  @@index([itemId])
}

model InventoryItem {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  category    String
  unit        String   // PCS, BOX, LITRE, etc.
  minQuantity Int      @default(0)
  currentQuantity Int  @default(0)
  locationId  String?
  location    Location? @relation(fields: [locationId], references: [id])
  transactions InventoryTransaction[]

  @@index([name])
  @@index([category])
  @@index([locationId])
}

model Feedback {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Int      @default(0)
  comment     String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  bookingId   String?  @unique
  booking     Booking? @relation(fields: [bookingId], references: [id])

  @@index([rating])
  @@index([userId])
}

model Report {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  type        String   // FINANCIAL, PERFORMANCE, INVENTORY, etc.
  status      String   // PENDING, GENERATING, COMPLETED, FAILED
  data        Json?    // Report data in JSON format
  startDate   DateTime
  endDate     DateTime
  generatedBy String?
  user        User?    @relation(fields: [generatedBy], references: [id])
  format      String   // PDF, CSV, EXCEL
  url         String?  // URL to download the report
  error       String?  // Error message if generation failed

  @@index([type])
  @@index([status])
  @@index([generatedBy])
  @@index([startDate])
  @@index([endDate])
}